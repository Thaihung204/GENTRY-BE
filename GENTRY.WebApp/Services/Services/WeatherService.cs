using GENTRY.WebApp.Services.DataTransferObjects.WeatherDTOs;
using GENTRY.WebApp.Services.Interfaces;

namespace GENTRY.WebApp.Services.Services
{
    public class WeatherService : IWeatherService
    {
        private readonly List<WeatherDto> _weatherData;

        public WeatherService()
        {
            // Initialize predefined weather conditions
            _weatherData = new List<WeatherDto>
            {
                new WeatherDto { Id = 1, Name = "Sunny", Description = "N·∫Øng", Icon = "‚òÄÔ∏è", IsActive = true },
                new WeatherDto { Id = 2, Name = "Cloudy", Description = "C√≥ m√¢y", Icon = "‚òÅÔ∏è", IsActive = true },
                new WeatherDto { Id = 3, Name = "Rainy", Description = "M∆∞a", Icon = "üåßÔ∏è", IsActive = true },
                new WeatherDto { Id = 4, Name = "Stormy", Description = "B√£o", Icon = "‚õàÔ∏è", IsActive = true },
                new WeatherDto { Id = 5, Name = "Snowy", Description = "Tuy·∫øt", Icon = "‚ùÑÔ∏è", IsActive = true },
                new WeatherDto { Id = 6, Name = "Windy", Description = "C√≥ gi√≥", Icon = "üí®", IsActive = true },
                new WeatherDto { Id = 7, Name = "Hot", Description = "N√≥ng", Icon = "üî•", IsActive = true },
                new WeatherDto { Id = 8, Name = "Cold", Description = "L·∫°nh", Icon = "üßä", IsActive = true },
                new WeatherDto { Id = 9, Name = "Humid", Description = "·∫®m ∆∞·ªõt", Icon = "üíß", IsActive = true },
                new WeatherDto { Id = 10, Name = "Dry", Description = "Kh√¥", Icon = "üåµ", IsActive = true }
            };
        }

        public async Task<List<WeatherDto>> GetAllAsync()
        {
            await Task.Delay(1); // Simulate async operation
            return _weatherData.Where(w => w.IsActive).ToList();
        }

        public async Task<WeatherDto?> GetByIdAsync(int id)
        {
            await Task.Delay(1); // Simulate async operation
            return _weatherData.FirstOrDefault(w => w.Id == id && w.IsActive);
        }
    }
}
